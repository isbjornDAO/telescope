// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  address   String   @unique
  username  String?
  xp        Int      @default(0)
  level     Int      @default(1)
  streak    Int      @default(0)
  longestStreak  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  votes     Vote[]
  votesS1   VoteS1[]
  discordId String?
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  avatar      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  social      Social?
  metadata    Json?    // Will store { likes: number, dislikes: number, voters: number }
  votes       Vote[]
  tags        String[] @default([])
  deleted     Boolean  @default(false)
  deletedAt   DateTime?
}

model Vote {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  project    Project? @relation(fields: [projectId], references: [id])
  projectId  String   @db.ObjectId
  votedDate  DateTime @default(now())
  type       String   @default("like") // "like" or "dislike"
}

model IncubatorProject {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String   @unique
  description String
  logo        String
  status      String   // 'live', 'upcoming', 'presale', 'scam'
  launchDate  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  social      Social?
  tags        String[] @default([])
}

model ProjectS1 {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  avatar      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  social      Social?
  metadata    Json?    // Will store { likes: number, dislikes: number, voters: number }
  votes       VoteS1[]
  tags        String[] @default([])
  deleted     Boolean  @default(false)
  deletedAt   DateTime?
}

model VoteS1 {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  project    ProjectS1?  @relation(fields: [projectId], references: [id])
  projectId  String   @db.ObjectId
  votedDate  DateTime @default(now())
  type       String   @default("like") // "like" or "dislike"
}

type Social {
  twitter          String?
  discord          String?
  telegram         String?
  website          String?
  dexscreener      String?
  contractAddress  String?
}

model AdminSettings {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  voteLock  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
